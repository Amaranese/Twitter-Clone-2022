// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  retweet: (where?: RetweetWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  tweet: (where?: TweetWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikeNullablePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  retweet: (where: RetweetWhereUniqueInput) => RetweetNullablePromise;
  retweets: (args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Retweet>;
  retweetsConnection: (args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RetweetConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  tweet: (where: TweetWhereUniqueInput) => TweetNullablePromise;
  tweets: (args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tweet>;
  tweetsConnection: (args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TweetConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createRetweet: (data: RetweetCreateInput) => RetweetPromise;
  updateRetweet: (args: {
    data: RetweetUpdateInput;
    where: RetweetWhereUniqueInput;
  }) => RetweetPromise;
  upsertRetweet: (args: {
    where: RetweetWhereUniqueInput;
    create: RetweetCreateInput;
    update: RetweetUpdateInput;
  }) => RetweetPromise;
  deleteRetweet: (where: RetweetWhereUniqueInput) => RetweetPromise;
  deleteManyRetweets: (where?: RetweetWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createTweet: (data: TweetCreateInput) => TweetPromise;
  updateTweet: (args: {
    data: TweetUpdateInput;
    where: TweetWhereUniqueInput;
  }) => TweetPromise;
  updateManyTweets: (args: {
    data: TweetUpdateManyMutationInput;
    where?: TweetWhereInput;
  }) => BatchPayloadPromise;
  upsertTweet: (args: {
    where: TweetWhereUniqueInput;
    create: TweetCreateInput;
    update: TweetUpdateInput;
  }) => TweetPromise;
  deleteTweet: (where: TweetWhereUniqueInput) => TweetPromise;
  deleteManyTweets: (where?: TweetWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  retweet: (
    where?: RetweetSubscriptionWhereInput
  ) => RetweetSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  tweet: (
    where?: TweetSubscriptionWhereInput
  ) => TweetSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TweetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RetweetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "handle_ASC"
  | "handle_DESC"
  | "password_ASC"
  | "password_DESC"
  | "coverPhoto_ASC"
  | "coverPhoto_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "location_ASC"
  | "location_DESC"
  | "website_ASC"
  | "website_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TweetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  retweets_every?: Maybe<RetweetWhereInput>;
  retweets_some?: Maybe<RetweetWhereInput>;
  retweets_none?: Maybe<RetweetWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TweetWhereInput[] | TweetWhereInput>;
  OR?: Maybe<TweetWhereInput[] | TweetWhereInput>;
  NOT?: Maybe<TweetWhereInput[] | TweetWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  coverPhoto_not?: Maybe<String>;
  coverPhoto_in?: Maybe<String[] | String>;
  coverPhoto_not_in?: Maybe<String[] | String>;
  coverPhoto_lt?: Maybe<String>;
  coverPhoto_lte?: Maybe<String>;
  coverPhoto_gt?: Maybe<String>;
  coverPhoto_gte?: Maybe<String>;
  coverPhoto_contains?: Maybe<String>;
  coverPhoto_not_contains?: Maybe<String>;
  coverPhoto_starts_with?: Maybe<String>;
  coverPhoto_not_starts_with?: Maybe<String>;
  coverPhoto_ends_with?: Maybe<String>;
  coverPhoto_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  dob?: Maybe<String>;
  dob_not?: Maybe<String>;
  dob_in?: Maybe<String[] | String>;
  dob_not_in?: Maybe<String[] | String>;
  dob_lt?: Maybe<String>;
  dob_lte?: Maybe<String>;
  dob_gt?: Maybe<String>;
  dob_gte?: Maybe<String>;
  dob_contains?: Maybe<String>;
  dob_not_contains?: Maybe<String>;
  dob_starts_with?: Maybe<String>;
  dob_not_starts_with?: Maybe<String>;
  dob_ends_with?: Maybe<String>;
  dob_not_ends_with?: Maybe<String>;
  tweets_every?: Maybe<TweetWhereInput>;
  tweets_some?: Maybe<TweetWhereInput>;
  tweets_none?: Maybe<TweetWhereInput>;
  retweets_every?: Maybe<RetweetWhereInput>;
  retweets_some?: Maybe<RetweetWhereInput>;
  retweets_none?: Maybe<RetweetWhereInput>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface RetweetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tweet?: Maybe<TweetWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RetweetWhereInput[] | RetweetWhereInput>;
  OR?: Maybe<RetweetWhereInput[] | RetweetWhereInput>;
  NOT?: Maybe<RetweetWhereInput[] | RetweetWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  tweet?: Maybe<TweetWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface LikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tweet?: Maybe<TweetWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  OR?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  NOT?: Maybe<LikeWhereInput[] | LikeWhereInput>;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  tweet?: Maybe<TweetWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RetweetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  tweets_every?: Maybe<TweetWhereInput>;
  tweets_some?: Maybe<TweetWhereInput>;
  tweets_none?: Maybe<TweetWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export type TweetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  tweet?: Maybe<TweetCreateOneWithoutCommentsInput>;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
}

export interface TweetCreateOneWithoutCommentsInput {
  create?: Maybe<TweetCreateWithoutCommentsInput>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTweetsInput>;
  text: String;
  tags?: Maybe<TweetCreatetagsInput>;
  files?: Maybe<FileCreateManyWithoutTweetInput>;
  likes?: Maybe<LikeCreateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetCreateManyWithoutTweetInput>;
}

export interface UserCreateOneWithoutTweetsInput {
  create?: Maybe<UserCreateWithoutTweetsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTweetsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  retweets?: Maybe<RetweetCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  files?: Maybe<FileCreateManyWithoutUserInput>;
}

export interface RetweetCreateManyWithoutUserInput {
  create?: Maybe<
    RetweetCreateWithoutUserInput[] | RetweetCreateWithoutUserInput
  >;
  connect?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
}

export interface RetweetCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  tweet?: Maybe<TweetCreateOneWithoutRetweetsInput>;
}

export interface TweetCreateOneWithoutRetweetsInput {
  create?: Maybe<TweetCreateWithoutRetweetsInput>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetCreateWithoutRetweetsInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTweetsInput>;
  text: String;
  tags?: Maybe<TweetCreatetagsInput>;
  files?: Maybe<FileCreateManyWithoutTweetInput>;
  comments?: Maybe<CommentCreateManyWithoutTweetInput>;
  likes?: Maybe<LikeCreateManyWithoutTweetInput>;
}

export interface TweetCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface FileCreateManyWithoutTweetInput {
  create?: Maybe<FileCreateWithoutTweetInput[] | FileCreateWithoutTweetInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface FileCreateWithoutTweetInput {
  id?: Maybe<ID_Input>;
  url: String;
  user?: Maybe<UserCreateOneWithoutFilesInput>;
}

export interface UserCreateOneWithoutFilesInput {
  create?: Maybe<UserCreateWithoutFilesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetCreateManyWithoutUserInput>;
  retweets?: Maybe<RetweetCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
}

export interface TweetCreateManyWithoutUserInput {
  create?: Maybe<TweetCreateWithoutUserInput[] | TweetCreateWithoutUserInput>;
  connect?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
}

export interface TweetCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  tags?: Maybe<TweetCreatetagsInput>;
  files?: Maybe<FileCreateManyWithoutTweetInput>;
  comments?: Maybe<CommentCreateManyWithoutTweetInput>;
  likes?: Maybe<LikeCreateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetCreateManyWithoutTweetInput>;
}

export interface CommentCreateManyWithoutTweetInput {
  create?: Maybe<
    CommentCreateWithoutTweetInput[] | CommentCreateWithoutTweetInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutTweetInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetCreateManyWithoutUserInput>;
  retweets?: Maybe<RetweetCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  files?: Maybe<FileCreateManyWithoutUserInput>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetCreateManyWithoutUserInput>;
  retweets?: Maybe<RetweetCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  files?: Maybe<FileCreateManyWithoutUserInput>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  tweet?: Maybe<TweetCreateOneWithoutCommentsInput>;
}

export interface LikeCreateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  tweet?: Maybe<TweetCreateOneWithoutLikesInput>;
}

export interface TweetCreateOneWithoutLikesInput {
  create?: Maybe<TweetCreateWithoutLikesInput>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTweetsInput>;
  text: String;
  tags?: Maybe<TweetCreatetagsInput>;
  files?: Maybe<FileCreateManyWithoutTweetInput>;
  comments?: Maybe<CommentCreateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetCreateManyWithoutTweetInput>;
}

export interface RetweetCreateManyWithoutTweetInput {
  create?: Maybe<
    RetweetCreateWithoutTweetInput[] | RetweetCreateWithoutTweetInput
  >;
  connect?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
}

export interface RetweetCreateWithoutTweetInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutRetweetsInput>;
}

export interface UserCreateOneWithoutRetweetsInput {
  create?: Maybe<UserCreateWithoutRetweetsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRetweetsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  files?: Maybe<FileCreateManyWithoutUserInput>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetCreateManyWithoutUserInput>;
  retweets?: Maybe<RetweetCreateManyWithoutUserInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  files?: Maybe<FileCreateManyWithoutUserInput>;
}

export interface FileCreateManyWithoutUserInput {
  create?: Maybe<FileCreateWithoutUserInput[] | FileCreateWithoutUserInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface FileCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  url: String;
  tweet?: Maybe<TweetCreateOneWithoutFilesInput>;
}

export interface TweetCreateOneWithoutFilesInput {
  create?: Maybe<TweetCreateWithoutFilesInput>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTweetsInput>;
  text: String;
  tags?: Maybe<TweetCreatetagsInput>;
  comments?: Maybe<CommentCreateManyWithoutTweetInput>;
  likes?: Maybe<LikeCreateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetCreateManyWithoutTweetInput>;
}

export interface LikeCreateManyWithoutTweetInput {
  create?: Maybe<LikeCreateWithoutTweetInput[] | LikeCreateWithoutTweetInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutTweetInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
}

export interface UserCreateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetCreateManyWithoutUserInput>;
  retweets?: Maybe<RetweetCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  files?: Maybe<FileCreateManyWithoutUserInput>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  tweet?: Maybe<TweetUpdateOneWithoutCommentsInput>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
}

export interface TweetUpdateOneWithoutCommentsInput {
  create?: Maybe<TweetCreateWithoutCommentsInput>;
  update?: Maybe<TweetUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<TweetUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneWithoutTweetsInput>;
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
  files?: Maybe<FileUpdateManyWithoutTweetInput>;
  likes?: Maybe<LikeUpdateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutTweetInput>;
}

export interface UserUpdateOneWithoutTweetsInput {
  create?: Maybe<UserCreateWithoutTweetsInput>;
  update?: Maybe<UserUpdateWithoutTweetsDataInput>;
  upsert?: Maybe<UserUpsertWithoutTweetsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTweetsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  retweets?: Maybe<RetweetUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  files?: Maybe<FileUpdateManyWithoutUserInput>;
}

export interface RetweetUpdateManyWithoutUserInput {
  create?: Maybe<
    RetweetCreateWithoutUserInput[] | RetweetCreateWithoutUserInput
  >;
  delete?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  connect?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  set?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  disconnect?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  update?: Maybe<
    | RetweetUpdateWithWhereUniqueWithoutUserInput[]
    | RetweetUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RetweetUpsertWithWhereUniqueWithoutUserInput[]
    | RetweetUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<RetweetScalarWhereInput[] | RetweetScalarWhereInput>;
}

export interface RetweetUpdateWithWhereUniqueWithoutUserInput {
  where: RetweetWhereUniqueInput;
  data: RetweetUpdateWithoutUserDataInput;
}

export interface RetweetUpdateWithoutUserDataInput {
  tweet?: Maybe<TweetUpdateOneWithoutRetweetsInput>;
}

export interface TweetUpdateOneWithoutRetweetsInput {
  create?: Maybe<TweetCreateWithoutRetweetsInput>;
  update?: Maybe<TweetUpdateWithoutRetweetsDataInput>;
  upsert?: Maybe<TweetUpsertWithoutRetweetsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetUpdateWithoutRetweetsDataInput {
  user?: Maybe<UserUpdateOneWithoutTweetsInput>;
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
  files?: Maybe<FileUpdateManyWithoutTweetInput>;
  comments?: Maybe<CommentUpdateManyWithoutTweetInput>;
  likes?: Maybe<LikeUpdateManyWithoutTweetInput>;
}

export interface TweetUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface FileUpdateManyWithoutTweetInput {
  create?: Maybe<FileCreateWithoutTweetInput[] | FileCreateWithoutTweetInput>;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutTweetInput[]
    | FileUpdateWithWhereUniqueWithoutTweetInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutTweetInput[]
    | FileUpsertWithWhereUniqueWithoutTweetInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface FileUpdateWithWhereUniqueWithoutTweetInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutTweetDataInput;
}

export interface FileUpdateWithoutTweetDataInput {
  url?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutFilesInput>;
}

export interface UserUpdateOneWithoutFilesInput {
  create?: Maybe<UserCreateWithoutFilesInput>;
  update?: Maybe<UserUpdateWithoutFilesDataInput>;
  upsert?: Maybe<UserUpsertWithoutFilesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFilesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyWithoutUserInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
}

export interface TweetUpdateManyWithoutUserInput {
  create?: Maybe<TweetCreateWithoutUserInput[] | TweetCreateWithoutUserInput>;
  delete?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  connect?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  set?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  disconnect?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  update?: Maybe<
    | TweetUpdateWithWhereUniqueWithoutUserInput[]
    | TweetUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TweetUpsertWithWhereUniqueWithoutUserInput[]
    | TweetUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<TweetScalarWhereInput[] | TweetScalarWhereInput>;
  updateMany?: Maybe<
    TweetUpdateManyWithWhereNestedInput[] | TweetUpdateManyWithWhereNestedInput
  >;
}

export interface TweetUpdateWithWhereUniqueWithoutUserInput {
  where: TweetWhereUniqueInput;
  data: TweetUpdateWithoutUserDataInput;
}

export interface TweetUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
  files?: Maybe<FileUpdateManyWithoutTweetInput>;
  comments?: Maybe<CommentUpdateManyWithoutTweetInput>;
  likes?: Maybe<LikeUpdateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutTweetInput>;
}

export interface CommentUpdateManyWithoutTweetInput {
  create?: Maybe<
    CommentCreateWithoutTweetInput[] | CommentCreateWithoutTweetInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutTweetInput[]
    | CommentUpdateWithWhereUniqueWithoutTweetInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutTweetInput[]
    | CommentUpsertWithWhereUniqueWithoutTweetInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutTweetInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutTweetDataInput;
}

export interface CommentUpdateWithoutTweetDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyWithoutUserInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  files?: Maybe<FileUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyWithoutUserInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  files?: Maybe<FileUpdateManyWithoutUserInput>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  tweet?: Maybe<TweetUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface LikeUpdateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutUserInput[]
    | LikeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutUserInput[]
    | LikeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutUserDataInput;
}

export interface LikeUpdateWithoutUserDataInput {
  tweet?: Maybe<TweetUpdateOneWithoutLikesInput>;
}

export interface TweetUpdateOneWithoutLikesInput {
  create?: Maybe<TweetCreateWithoutLikesInput>;
  update?: Maybe<TweetUpdateWithoutLikesDataInput>;
  upsert?: Maybe<TweetUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetUpdateWithoutLikesDataInput {
  user?: Maybe<UserUpdateOneWithoutTweetsInput>;
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
  files?: Maybe<FileUpdateManyWithoutTweetInput>;
  comments?: Maybe<CommentUpdateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutTweetInput>;
}

export interface RetweetUpdateManyWithoutTweetInput {
  create?: Maybe<
    RetweetCreateWithoutTweetInput[] | RetweetCreateWithoutTweetInput
  >;
  delete?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  connect?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  set?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  disconnect?: Maybe<RetweetWhereUniqueInput[] | RetweetWhereUniqueInput>;
  update?: Maybe<
    | RetweetUpdateWithWhereUniqueWithoutTweetInput[]
    | RetweetUpdateWithWhereUniqueWithoutTweetInput
  >;
  upsert?: Maybe<
    | RetweetUpsertWithWhereUniqueWithoutTweetInput[]
    | RetweetUpsertWithWhereUniqueWithoutTweetInput
  >;
  deleteMany?: Maybe<RetweetScalarWhereInput[] | RetweetScalarWhereInput>;
}

export interface RetweetUpdateWithWhereUniqueWithoutTweetInput {
  where: RetweetWhereUniqueInput;
  data: RetweetUpdateWithoutTweetDataInput;
}

export interface RetweetUpdateWithoutTweetDataInput {
  user?: Maybe<UserUpdateOneWithoutRetweetsInput>;
}

export interface UserUpdateOneWithoutRetweetsInput {
  create?: Maybe<UserCreateWithoutRetweetsInput>;
  update?: Maybe<UserUpdateWithoutRetweetsDataInput>;
  upsert?: Maybe<UserUpsertWithoutRetweetsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRetweetsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  files?: Maybe<FileUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyWithoutUserInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutUserInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  files?: Maybe<FileUpdateManyWithoutUserInput>;
}

export interface FileUpdateManyWithoutUserInput {
  create?: Maybe<FileCreateWithoutUserInput[] | FileCreateWithoutUserInput>;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutUserInput[]
    | FileUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutUserInput[]
    | FileUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface FileUpdateWithWhereUniqueWithoutUserInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutUserDataInput;
}

export interface FileUpdateWithoutUserDataInput {
  url?: Maybe<String>;
  tweet?: Maybe<TweetUpdateOneWithoutFilesInput>;
}

export interface TweetUpdateOneWithoutFilesInput {
  create?: Maybe<TweetCreateWithoutFilesInput>;
  update?: Maybe<TweetUpdateWithoutFilesDataInput>;
  upsert?: Maybe<TweetUpsertWithoutFilesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TweetWhereUniqueInput>;
}

export interface TweetUpdateWithoutFilesDataInput {
  user?: Maybe<UserUpdateOneWithoutTweetsInput>;
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
  comments?: Maybe<CommentUpdateManyWithoutTweetInput>;
  likes?: Maybe<LikeUpdateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutTweetInput>;
}

export interface LikeUpdateManyWithoutTweetInput {
  create?: Maybe<LikeCreateWithoutTweetInput[] | LikeCreateWithoutTweetInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutTweetInput[]
    | LikeUpdateWithWhereUniqueWithoutTweetInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutTweetInput[]
    | LikeUpsertWithWhereUniqueWithoutTweetInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutTweetInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutTweetDataInput;
}

export interface LikeUpdateWithoutTweetDataInput {
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
}

export interface UserUpdateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  update?: Maybe<UserUpdateWithoutLikesDataInput>;
  upsert?: Maybe<UserUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutLikesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyWithoutUserInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  files?: Maybe<FileUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput;
  create: UserCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutTweetInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutTweetDataInput;
  create: LikeCreateWithoutTweetInput;
}

export interface LikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  OR?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  NOT?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface TweetUpsertWithoutFilesInput {
  update: TweetUpdateWithoutFilesDataInput;
  create: TweetCreateWithoutFilesInput;
}

export interface FileUpsertWithWhereUniqueWithoutUserInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutUserDataInput;
  create: FileCreateWithoutUserInput;
}

export interface FileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  OR?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  NOT?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface FileUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  coverPhoto_not?: Maybe<String>;
  coverPhoto_in?: Maybe<String[] | String>;
  coverPhoto_not_in?: Maybe<String[] | String>;
  coverPhoto_lt?: Maybe<String>;
  coverPhoto_lte?: Maybe<String>;
  coverPhoto_gt?: Maybe<String>;
  coverPhoto_gte?: Maybe<String>;
  coverPhoto_contains?: Maybe<String>;
  coverPhoto_not_contains?: Maybe<String>;
  coverPhoto_starts_with?: Maybe<String>;
  coverPhoto_not_starts_with?: Maybe<String>;
  coverPhoto_ends_with?: Maybe<String>;
  coverPhoto_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  dob?: Maybe<String>;
  dob_not?: Maybe<String>;
  dob_in?: Maybe<String[] | String>;
  dob_not_in?: Maybe<String[] | String>;
  dob_lt?: Maybe<String>;
  dob_lte?: Maybe<String>;
  dob_gt?: Maybe<String>;
  dob_gte?: Maybe<String>;
  dob_contains?: Maybe<String>;
  dob_not_contains?: Maybe<String>;
  dob_starts_with?: Maybe<String>;
  dob_not_starts_with?: Maybe<String>;
  dob_ends_with?: Maybe<String>;
  dob_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
}

export interface UserUpsertWithoutRetweetsInput {
  update: UserUpdateWithoutRetweetsDataInput;
  create: UserCreateWithoutRetweetsInput;
}

export interface RetweetUpsertWithWhereUniqueWithoutTweetInput {
  where: RetweetWhereUniqueInput;
  update: RetweetUpdateWithoutTweetDataInput;
  create: RetweetCreateWithoutTweetInput;
}

export interface RetweetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RetweetScalarWhereInput[] | RetweetScalarWhereInput>;
  OR?: Maybe<RetweetScalarWhereInput[] | RetweetScalarWhereInput>;
  NOT?: Maybe<RetweetScalarWhereInput[] | RetweetScalarWhereInput>;
}

export interface TweetUpsertWithoutLikesInput {
  update: TweetUpdateWithoutLikesDataInput;
  create: TweetCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutUserDataInput;
  create: LikeCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutTweetInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutTweetDataInput;
  create: CommentCreateWithoutTweetInput;
}

export interface TweetUpsertWithWhereUniqueWithoutUserInput {
  where: TweetWhereUniqueInput;
  update: TweetUpdateWithoutUserDataInput;
  create: TweetCreateWithoutUserInput;
}

export interface TweetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TweetScalarWhereInput[] | TweetScalarWhereInput>;
  OR?: Maybe<TweetScalarWhereInput[] | TweetScalarWhereInput>;
  NOT?: Maybe<TweetScalarWhereInput[] | TweetScalarWhereInput>;
}

export interface TweetUpdateManyWithWhereNestedInput {
  where: TweetScalarWhereInput;
  data: TweetUpdateManyDataInput;
}

export interface TweetUpdateManyDataInput {
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
}

export interface UserUpsertWithoutFilesInput {
  update: UserUpdateWithoutFilesDataInput;
  create: UserCreateWithoutFilesInput;
}

export interface FileUpsertWithWhereUniqueWithoutTweetInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutTweetDataInput;
  create: FileCreateWithoutTweetInput;
}

export interface TweetUpsertWithoutRetweetsInput {
  update: TweetUpdateWithoutRetweetsDataInput;
  create: TweetCreateWithoutRetweetsInput;
}

export interface RetweetUpsertWithWhereUniqueWithoutUserInput {
  where: RetweetWhereUniqueInput;
  update: RetweetUpdateWithoutUserDataInput;
  create: RetweetCreateWithoutUserInput;
}

export interface UserUpsertWithoutTweetsInput {
  update: UserUpdateWithoutTweetsDataInput;
  create: UserCreateWithoutTweetsInput;
}

export interface TweetUpsertWithoutCommentsInput {
  update: TweetUpdateWithoutCommentsDataInput;
  create: TweetCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  tweet?: Maybe<TweetCreateOneWithoutFilesInput>;
  user?: Maybe<UserCreateOneWithoutFilesInput>;
}

export interface FileUpdateInput {
  url?: Maybe<String>;
  tweet?: Maybe<TweetUpdateOneWithoutFilesInput>;
  user?: Maybe<UserUpdateOneWithoutFilesInput>;
}

export interface FileUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface LikeCreateInput {
  id?: Maybe<ID_Input>;
  tweet?: Maybe<TweetCreateOneWithoutLikesInput>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
}

export interface LikeUpdateInput {
  tweet?: Maybe<TweetUpdateOneWithoutLikesInput>;
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
}

export interface RetweetCreateInput {
  id?: Maybe<ID_Input>;
  tweet?: Maybe<TweetCreateOneWithoutRetweetsInput>;
  user?: Maybe<UserCreateOneWithoutRetweetsInput>;
}

export interface RetweetUpdateInput {
  tweet?: Maybe<TweetUpdateOneWithoutRetweetsInput>;
  user?: Maybe<UserUpdateOneWithoutRetweetsInput>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  tweets?: Maybe<TweetCreateManyInput>;
}

export interface TweetCreateManyInput {
  create?: Maybe<TweetCreateInput[] | TweetCreateInput>;
  connect?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
}

export interface TweetCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTweetsInput>;
  text: String;
  tags?: Maybe<TweetCreatetagsInput>;
  files?: Maybe<FileCreateManyWithoutTweetInput>;
  comments?: Maybe<CommentCreateManyWithoutTweetInput>;
  likes?: Maybe<LikeCreateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetCreateManyWithoutTweetInput>;
}

export interface TagUpdateInput {
  text?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyInput>;
}

export interface TweetUpdateManyInput {
  create?: Maybe<TweetCreateInput[] | TweetCreateInput>;
  update?: Maybe<
    | TweetUpdateWithWhereUniqueNestedInput[]
    | TweetUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TweetUpsertWithWhereUniqueNestedInput[]
    | TweetUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  connect?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  set?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  disconnect?: Maybe<TweetWhereUniqueInput[] | TweetWhereUniqueInput>;
  deleteMany?: Maybe<TweetScalarWhereInput[] | TweetScalarWhereInput>;
  updateMany?: Maybe<
    TweetUpdateManyWithWhereNestedInput[] | TweetUpdateManyWithWhereNestedInput
  >;
}

export interface TweetUpdateWithWhereUniqueNestedInput {
  where: TweetWhereUniqueInput;
  data: TweetUpdateDataInput;
}

export interface TweetUpdateDataInput {
  user?: Maybe<UserUpdateOneWithoutTweetsInput>;
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
  files?: Maybe<FileUpdateManyWithoutTweetInput>;
  comments?: Maybe<CommentUpdateManyWithoutTweetInput>;
  likes?: Maybe<LikeUpdateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutTweetInput>;
}

export interface TweetUpsertWithWhereUniqueNestedInput {
  where: TweetWhereUniqueInput;
  update: TweetUpdateDataInput;
  create: TweetCreateInput;
}

export interface TagUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface TweetUpdateInput {
  user?: Maybe<UserUpdateOneWithoutTweetsInput>;
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
  files?: Maybe<FileUpdateManyWithoutTweetInput>;
  comments?: Maybe<CommentUpdateManyWithoutTweetInput>;
  likes?: Maybe<LikeUpdateManyWithoutTweetInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutTweetInput>;
}

export interface TweetUpdateManyMutationInput {
  text?: Maybe<String>;
  tags?: Maybe<TweetUpdatetagsInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetCreateManyWithoutUserInput>;
  retweets?: Maybe<RetweetCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  files?: Maybe<FileCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
  tweets?: Maybe<TweetUpdateManyWithoutUserInput>;
  retweets?: Maybe<RetweetUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  files?: Maybe<FileUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
  password?: Maybe<String>;
  coverPhoto?: Maybe<String>;
  avatar?: Maybe<String>;
  bio?: Maybe<String>;
  location?: Maybe<String>;
  website?: Maybe<String>;
  dob?: Maybe<String>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LikeWhereInput>;
  AND?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  OR?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  NOT?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
}

export interface RetweetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RetweetWhereInput>;
  AND?: Maybe<RetweetSubscriptionWhereInput[] | RetweetSubscriptionWhereInput>;
  OR?: Maybe<RetweetSubscriptionWhereInput[] | RetweetSubscriptionWhereInput>;
  NOT?: Maybe<RetweetSubscriptionWhereInput[] | RetweetSubscriptionWhereInput>;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface TweetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TweetWhereInput>;
  AND?: Maybe<TweetSubscriptionWhereInput[] | TweetSubscriptionWhereInput>;
  OR?: Maybe<TweetSubscriptionWhereInput[] | TweetSubscriptionWhereInput>;
  NOT?: Maybe<TweetSubscriptionWhereInput[] | TweetSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  tweet: <T = TweetSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Tweet {
  id: ID_Output;
  text: String;
  tags: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TweetPromise extends Promise<Tweet>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  tags: () => Promise<String[]>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  retweets: <T = FragmentableArray<Retweet>>(args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TweetSubscription
  extends Promise<AsyncIterator<Tweet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  retweets: <T = Promise<AsyncIterator<RetweetSubscription>>>(args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TweetNullablePromise
  extends Promise<Tweet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  tags: () => Promise<String[]>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  retweets: <T = FragmentableArray<Retweet>>(args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: String;
  coverPhoto?: String;
  avatar?: String;
  bio?: String;
  location?: String;
  website?: String;
  dob?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  handle: () => Promise<String>;
  password: () => Promise<String>;
  coverPhoto: () => Promise<String>;
  avatar: () => Promise<String>;
  bio: () => Promise<String>;
  location: () => Promise<String>;
  website: () => Promise<String>;
  dob: () => Promise<String>;
  tweets: <T = FragmentableArray<Tweet>>(args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  retweets: <T = FragmentableArray<Retweet>>(args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  handle: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  coverPhoto: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<String>>;
  tweets: <T = Promise<AsyncIterator<TweetSubscription>>>(args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  retweets: <T = Promise<AsyncIterator<RetweetSubscription>>>(args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  handle: () => Promise<String>;
  password: () => Promise<String>;
  coverPhoto: () => Promise<String>;
  avatar: () => Promise<String>;
  bio: () => Promise<String>;
  location: () => Promise<String>;
  website: () => Promise<String>;
  dob: () => Promise<String>;
  tweets: <T = FragmentableArray<Tweet>>(args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  retweets: <T = FragmentableArray<Retweet>>(args?: {
    where?: RetweetWhereInput;
    orderBy?: RetweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Retweet {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RetweetPromise extends Promise<Retweet>, Fragmentable {
  id: () => Promise<ID_Output>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RetweetSubscription
  extends Promise<AsyncIterator<Retweet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tweet: <T = TweetSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RetweetNullablePromise
  extends Promise<Retweet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Like {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tweet: <T = TweetSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeNullablePromise
  extends Promise<Like | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface File {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  tweet: <T = TweetSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  tweet: <T = TweetPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RetweetConnection {
  pageInfo: PageInfo;
  edges: RetweetEdge[];
}

export interface RetweetConnectionPromise
  extends Promise<RetweetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RetweetEdge>>() => T;
  aggregate: <T = AggregateRetweetPromise>() => T;
}

export interface RetweetConnectionSubscription
  extends Promise<AsyncIterator<RetweetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RetweetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRetweetSubscription>() => T;
}

export interface RetweetEdge {
  node: Retweet;
  cursor: String;
}

export interface RetweetEdgePromise extends Promise<RetweetEdge>, Fragmentable {
  node: <T = RetweetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RetweetEdgeSubscription
  extends Promise<AsyncIterator<RetweetEdge>>,
    Fragmentable {
  node: <T = RetweetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRetweet {
  count: Int;
}

export interface AggregateRetweetPromise
  extends Promise<AggregateRetweet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRetweetSubscription
  extends Promise<AsyncIterator<AggregateRetweet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Tag {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  tweets: <T = FragmentableArray<Tweet>>(args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  tweets: <T = Promise<AsyncIterator<TweetSubscription>>>(args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  tweets: <T = FragmentableArray<Tweet>>(args?: {
    where?: TweetWhereInput;
    orderBy?: TweetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TweetConnection {
  pageInfo: PageInfo;
  edges: TweetEdge[];
}

export interface TweetConnectionPromise
  extends Promise<TweetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TweetEdge>>() => T;
  aggregate: <T = AggregateTweetPromise>() => T;
}

export interface TweetConnectionSubscription
  extends Promise<AsyncIterator<TweetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TweetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTweetSubscription>() => T;
}

export interface TweetEdge {
  node: Tweet;
  cursor: String;
}

export interface TweetEdgePromise extends Promise<TweetEdge>, Fragmentable {
  node: <T = TweetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TweetEdgeSubscription
  extends Promise<AsyncIterator<TweetEdge>>,
    Fragmentable {
  node: <T = TweetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTweet {
  count: Int;
}

export interface AggregateTweetPromise
  extends Promise<AggregateTweet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTweetSubscription
  extends Promise<AsyncIterator<AggregateTweet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RetweetSubscriptionPayload {
  mutation: MutationType;
  node: Retweet;
  updatedFields: String[];
  previousValues: RetweetPreviousValues;
}

export interface RetweetSubscriptionPayloadPromise
  extends Promise<RetweetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RetweetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RetweetPreviousValuesPromise>() => T;
}

export interface RetweetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RetweetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RetweetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RetweetPreviousValuesSubscription>() => T;
}

export interface RetweetPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RetweetPreviousValuesPromise
  extends Promise<RetweetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RetweetPreviousValuesSubscription
  extends Promise<AsyncIterator<RetweetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TweetSubscriptionPayload {
  mutation: MutationType;
  node: Tweet;
  updatedFields: String[];
  previousValues: TweetPreviousValues;
}

export interface TweetSubscriptionPayloadPromise
  extends Promise<TweetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TweetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TweetPreviousValuesPromise>() => T;
}

export interface TweetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TweetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TweetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TweetPreviousValuesSubscription>() => T;
}

export interface TweetPreviousValues {
  id: ID_Output;
  text: String;
  tags: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TweetPreviousValuesPromise
  extends Promise<TweetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  tags: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TweetPreviousValuesSubscription
  extends Promise<AsyncIterator<TweetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  handle: String;
  password?: String;
  coverPhoto?: String;
  avatar?: String;
  bio?: String;
  location?: String;
  website?: String;
  dob?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  handle: () => Promise<String>;
  password: () => Promise<String>;
  coverPhoto: () => Promise<String>;
  avatar: () => Promise<String>;
  bio: () => Promise<String>;
  location: () => Promise<String>;
  website: () => Promise<String>;
  dob: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  handle: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  coverPhoto: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Tweet",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Retweet",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;